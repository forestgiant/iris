// Code generated by protoc-gen-go.
// source: iris.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	iris.proto

It has these top-level messages:
	ConnectRequest
	ConnectResponse
	ListenRequest
	Update
	GetSourcesRequest
	GetSourcesResponse
	GetValueRequest
	GetValueResponse
	SetValueRequest
	SetValueResponse
	RemoveValueRequest
	RemoveValueResponse
	RemoveSourceRequest
	RemoveSourceResponse
	GetKeysRequest
	GetKeysResponse
	SubscribeRequest
	SubscribeResponse
	SubscribeKeyRequest
	SubscribeKeyResponse
	UnsubscribeRequest
	UnsubscribeResponse
	UnsubscribeKeyRequest
	UnsubscribeKeyResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConnectRequest struct {
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ConnectResponse struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *ConnectResponse) Reset()                    { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string            { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()               {}
func (*ConnectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConnectResponse) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

type ListenRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *ListenRequest) Reset()                    { *m = ListenRequest{} }
func (m *ListenRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenRequest) ProtoMessage()               {}
func (*ListenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListenRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

type Update struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Update) Reset()                    { *m = Update{} }
func (m *Update) String() string            { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()               {}
func (*Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Update) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Update) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Update) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type GetSourcesRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *GetSourcesRequest) Reset()                    { *m = GetSourcesRequest{} }
func (m *GetSourcesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSourcesRequest) ProtoMessage()               {}
func (*GetSourcesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetSourcesRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

type GetSourcesResponse struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
}

func (m *GetSourcesResponse) Reset()                    { *m = GetSourcesResponse{} }
func (m *GetSourcesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSourcesResponse) ProtoMessage()               {}
func (*GetSourcesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetSourcesResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type GetValueRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *GetValueRequest) Reset()                    { *m = GetValueRequest{} }
func (m *GetValueRequest) String() string            { return proto.CompactTextString(m) }
func (*GetValueRequest) ProtoMessage()               {}
func (*GetValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetValueRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *GetValueRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *GetValueRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetValueResponse struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetValueResponse) Reset()                    { *m = GetValueResponse{} }
func (m *GetValueResponse) String() string            { return proto.CompactTextString(m) }
func (*GetValueResponse) ProtoMessage()               {}
func (*GetValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetValueResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SetValueRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Value   []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetValueRequest) Reset()                    { *m = SetValueRequest{} }
func (m *SetValueRequest) String() string            { return proto.CompactTextString(m) }
func (*SetValueRequest) ProtoMessage()               {}
func (*SetValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SetValueRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *SetValueRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SetValueRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetValueRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SetValueResponse struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetValueResponse) Reset()                    { *m = SetValueResponse{} }
func (m *SetValueResponse) String() string            { return proto.CompactTextString(m) }
func (*SetValueResponse) ProtoMessage()               {}
func (*SetValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SetValueResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type RemoveValueRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *RemoveValueRequest) Reset()                    { *m = RemoveValueRequest{} }
func (m *RemoveValueRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveValueRequest) ProtoMessage()               {}
func (*RemoveValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RemoveValueRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *RemoveValueRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RemoveValueRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type RemoveValueResponse struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *RemoveValueResponse) Reset()                    { *m = RemoveValueResponse{} }
func (m *RemoveValueResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveValueResponse) ProtoMessage()               {}
func (*RemoveValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RemoveValueResponse) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *RemoveValueResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RemoveValueResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type RemoveSourceRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *RemoveSourceRequest) Reset()                    { *m = RemoveSourceRequest{} }
func (m *RemoveSourceRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveSourceRequest) ProtoMessage()               {}
func (*RemoveSourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RemoveSourceRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *RemoveSourceRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type RemoveSourceResponse struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *RemoveSourceResponse) Reset()                    { *m = RemoveSourceResponse{} }
func (m *RemoveSourceResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveSourceResponse) ProtoMessage()               {}
func (*RemoveSourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RemoveSourceResponse) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *RemoveSourceResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type GetKeysRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *GetKeysRequest) Reset()                    { *m = GetKeysRequest{} }
func (m *GetKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKeysRequest) ProtoMessage()               {}
func (*GetKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetKeysRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *GetKeysRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type GetKeysResponse struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetKeysResponse) Reset()                    { *m = GetKeysResponse{} }
func (m *GetKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*GetKeysResponse) ProtoMessage()               {}
func (*GetKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetKeysResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type SubscribeRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SubscribeRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *SubscribeRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type SubscribeResponse struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SubscribeResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type SubscribeKeyRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *SubscribeKeyRequest) Reset()                    { *m = SubscribeKeyRequest{} }
func (m *SubscribeKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeKeyRequest) ProtoMessage()               {}
func (*SubscribeKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SubscribeKeyRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *SubscribeKeyRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SubscribeKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type SubscribeKeyResponse struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *SubscribeKeyResponse) Reset()                    { *m = SubscribeKeyResponse{} }
func (m *SubscribeKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeKeyResponse) ProtoMessage()               {}
func (*SubscribeKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SubscribeKeyResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SubscribeKeyResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type UnsubscribeRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *UnsubscribeRequest) Reset()                    { *m = UnsubscribeRequest{} }
func (m *UnsubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*UnsubscribeRequest) ProtoMessage()               {}
func (*UnsubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *UnsubscribeRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *UnsubscribeRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type UnsubscribeResponse struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
}

func (m *UnsubscribeResponse) Reset()                    { *m = UnsubscribeResponse{} }
func (m *UnsubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*UnsubscribeResponse) ProtoMessage()               {}
func (*UnsubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *UnsubscribeResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type UnsubscribeKeyRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *UnsubscribeKeyRequest) Reset()                    { *m = UnsubscribeKeyRequest{} }
func (m *UnsubscribeKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*UnsubscribeKeyRequest) ProtoMessage()               {}
func (*UnsubscribeKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *UnsubscribeKeyRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *UnsubscribeKeyRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *UnsubscribeKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type UnsubscribeKeyResponse struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *UnsubscribeKeyResponse) Reset()                    { *m = UnsubscribeKeyResponse{} }
func (m *UnsubscribeKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*UnsubscribeKeyResponse) ProtoMessage()               {}
func (*UnsubscribeKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *UnsubscribeKeyResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *UnsubscribeKeyResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "iris.pb.ConnectRequest")
	proto.RegisterType((*ConnectResponse)(nil), "iris.pb.ConnectResponse")
	proto.RegisterType((*ListenRequest)(nil), "iris.pb.ListenRequest")
	proto.RegisterType((*Update)(nil), "iris.pb.Update")
	proto.RegisterType((*GetSourcesRequest)(nil), "iris.pb.GetSourcesRequest")
	proto.RegisterType((*GetSourcesResponse)(nil), "iris.pb.GetSourcesResponse")
	proto.RegisterType((*GetValueRequest)(nil), "iris.pb.GetValueRequest")
	proto.RegisterType((*GetValueResponse)(nil), "iris.pb.GetValueResponse")
	proto.RegisterType((*SetValueRequest)(nil), "iris.pb.SetValueRequest")
	proto.RegisterType((*SetValueResponse)(nil), "iris.pb.SetValueResponse")
	proto.RegisterType((*RemoveValueRequest)(nil), "iris.pb.RemoveValueRequest")
	proto.RegisterType((*RemoveValueResponse)(nil), "iris.pb.RemoveValueResponse")
	proto.RegisterType((*RemoveSourceRequest)(nil), "iris.pb.RemoveSourceRequest")
	proto.RegisterType((*RemoveSourceResponse)(nil), "iris.pb.RemoveSourceResponse")
	proto.RegisterType((*GetKeysRequest)(nil), "iris.pb.GetKeysRequest")
	proto.RegisterType((*GetKeysResponse)(nil), "iris.pb.GetKeysResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "iris.pb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "iris.pb.SubscribeResponse")
	proto.RegisterType((*SubscribeKeyRequest)(nil), "iris.pb.SubscribeKeyRequest")
	proto.RegisterType((*SubscribeKeyResponse)(nil), "iris.pb.SubscribeKeyResponse")
	proto.RegisterType((*UnsubscribeRequest)(nil), "iris.pb.UnsubscribeRequest")
	proto.RegisterType((*UnsubscribeResponse)(nil), "iris.pb.UnsubscribeResponse")
	proto.RegisterType((*UnsubscribeKeyRequest)(nil), "iris.pb.UnsubscribeKeyRequest")
	proto.RegisterType((*UnsubscribeKeyResponse)(nil), "iris.pb.UnsubscribeKeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Iris service

type IrisClient interface {
	// Connect responds with a session identifier to be used for subsequent requests
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Listen responds with a stream of objects representing source, key, value updates
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Iris_ListenClient, error)
	// GetSources responds with a stream of objects representing available sources
	GetSources(ctx context.Context, in *GetSourcesRequest, opts ...grpc.CallOption) (Iris_GetSourcesClient, error)
	// GetKeys expects a source and responds with a stream of objects representing available keys
	GetKeys(ctx context.Context, in *GetKeysRequest, opts ...grpc.CallOption) (Iris_GetKeysClient, error)
	// SetValue sets the value for the specified source and key
	SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*SetValueResponse, error)
	// GetValue expects a source and key and responds with the associated value
	GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error)
	// RemoveValue removes the specified value from the provided source
	RemoveValue(ctx context.Context, in *RemoveValueRequest, opts ...grpc.CallOption) (*RemoveValueResponse, error)
	// RemoveSource removes the specified source
	RemoveSource(ctx context.Context, in *RemoveSourceRequest, opts ...grpc.CallOption) (*RemoveSourceResponse, error)
	// Subscribe indicates that the client wishes to be notified of all updates for the specified source
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// SubscribeKey indicates that the client wishes to be notified of updates associated with
	// a specific key from the specified source
	SubscribeKey(ctx context.Context, in *SubscribeKeyRequest, opts ...grpc.CallOption) (*SubscribeKeyResponse, error)
	// Unsubscribe indicates that the client no longer wishes to be notified of updates for the specified source
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
	// UnsubscribeKey indicates that the client no longer wishes to be notified of updates associated
	// with a specific key from the specified source
	UnsubscribeKey(ctx context.Context, in *UnsubscribeKeyRequest, opts ...grpc.CallOption) (*UnsubscribeKeyResponse, error)
}

type irisClient struct {
	cc *grpc.ClientConn
}

func NewIrisClient(cc *grpc.ClientConn) IrisClient {
	return &irisClient{cc}
}

func (c *irisClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := grpc.Invoke(ctx, "/iris.pb.Iris/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *irisClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Iris_ListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Iris_serviceDesc.Streams[0], c.cc, "/iris.pb.Iris/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &irisListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Iris_ListenClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type irisListenClient struct {
	grpc.ClientStream
}

func (x *irisListenClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *irisClient) GetSources(ctx context.Context, in *GetSourcesRequest, opts ...grpc.CallOption) (Iris_GetSourcesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Iris_serviceDesc.Streams[1], c.cc, "/iris.pb.Iris/GetSources", opts...)
	if err != nil {
		return nil, err
	}
	x := &irisGetSourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Iris_GetSourcesClient interface {
	Recv() (*GetSourcesResponse, error)
	grpc.ClientStream
}

type irisGetSourcesClient struct {
	grpc.ClientStream
}

func (x *irisGetSourcesClient) Recv() (*GetSourcesResponse, error) {
	m := new(GetSourcesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *irisClient) GetKeys(ctx context.Context, in *GetKeysRequest, opts ...grpc.CallOption) (Iris_GetKeysClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Iris_serviceDesc.Streams[2], c.cc, "/iris.pb.Iris/GetKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &irisGetKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Iris_GetKeysClient interface {
	Recv() (*GetKeysResponse, error)
	grpc.ClientStream
}

type irisGetKeysClient struct {
	grpc.ClientStream
}

func (x *irisGetKeysClient) Recv() (*GetKeysResponse, error) {
	m := new(GetKeysResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *irisClient) SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*SetValueResponse, error) {
	out := new(SetValueResponse)
	err := grpc.Invoke(ctx, "/iris.pb.Iris/SetValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *irisClient) GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error) {
	out := new(GetValueResponse)
	err := grpc.Invoke(ctx, "/iris.pb.Iris/GetValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *irisClient) RemoveValue(ctx context.Context, in *RemoveValueRequest, opts ...grpc.CallOption) (*RemoveValueResponse, error) {
	out := new(RemoveValueResponse)
	err := grpc.Invoke(ctx, "/iris.pb.Iris/RemoveValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *irisClient) RemoveSource(ctx context.Context, in *RemoveSourceRequest, opts ...grpc.CallOption) (*RemoveSourceResponse, error) {
	out := new(RemoveSourceResponse)
	err := grpc.Invoke(ctx, "/iris.pb.Iris/RemoveSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *irisClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := grpc.Invoke(ctx, "/iris.pb.Iris/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *irisClient) SubscribeKey(ctx context.Context, in *SubscribeKeyRequest, opts ...grpc.CallOption) (*SubscribeKeyResponse, error) {
	out := new(SubscribeKeyResponse)
	err := grpc.Invoke(ctx, "/iris.pb.Iris/SubscribeKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *irisClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := grpc.Invoke(ctx, "/iris.pb.Iris/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *irisClient) UnsubscribeKey(ctx context.Context, in *UnsubscribeKeyRequest, opts ...grpc.CallOption) (*UnsubscribeKeyResponse, error) {
	out := new(UnsubscribeKeyResponse)
	err := grpc.Invoke(ctx, "/iris.pb.Iris/UnsubscribeKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Iris service

type IrisServer interface {
	// Connect responds with a session identifier to be used for subsequent requests
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Listen responds with a stream of objects representing source, key, value updates
	Listen(*ListenRequest, Iris_ListenServer) error
	// GetSources responds with a stream of objects representing available sources
	GetSources(*GetSourcesRequest, Iris_GetSourcesServer) error
	// GetKeys expects a source and responds with a stream of objects representing available keys
	GetKeys(*GetKeysRequest, Iris_GetKeysServer) error
	// SetValue sets the value for the specified source and key
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
	// GetValue expects a source and key and responds with the associated value
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	// RemoveValue removes the specified value from the provided source
	RemoveValue(context.Context, *RemoveValueRequest) (*RemoveValueResponse, error)
	// RemoveSource removes the specified source
	RemoveSource(context.Context, *RemoveSourceRequest) (*RemoveSourceResponse, error)
	// Subscribe indicates that the client wishes to be notified of all updates for the specified source
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	// SubscribeKey indicates that the client wishes to be notified of updates associated with
	// a specific key from the specified source
	SubscribeKey(context.Context, *SubscribeKeyRequest) (*SubscribeKeyResponse, error)
	// Unsubscribe indicates that the client no longer wishes to be notified of updates for the specified source
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	// UnsubscribeKey indicates that the client no longer wishes to be notified of updates associated
	// with a specific key from the specified source
	UnsubscribeKey(context.Context, *UnsubscribeKeyRequest) (*UnsubscribeKeyResponse, error)
}

func RegisterIrisServer(s *grpc.Server, srv IrisServer) {
	s.RegisterService(&_Iris_serviceDesc, srv)
}

func _Iris_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrisServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iris.pb.Iris/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrisServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iris_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IrisServer).Listen(m, &irisListenServer{stream})
}

type Iris_ListenServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type irisListenServer struct {
	grpc.ServerStream
}

func (x *irisListenServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func _Iris_GetSources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IrisServer).GetSources(m, &irisGetSourcesServer{stream})
}

type Iris_GetSourcesServer interface {
	Send(*GetSourcesResponse) error
	grpc.ServerStream
}

type irisGetSourcesServer struct {
	grpc.ServerStream
}

func (x *irisGetSourcesServer) Send(m *GetSourcesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Iris_GetKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetKeysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IrisServer).GetKeys(m, &irisGetKeysServer{stream})
}

type Iris_GetKeysServer interface {
	Send(*GetKeysResponse) error
	grpc.ServerStream
}

type irisGetKeysServer struct {
	grpc.ServerStream
}

func (x *irisGetKeysServer) Send(m *GetKeysResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Iris_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrisServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iris.pb.Iris/SetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrisServer).SetValue(ctx, req.(*SetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iris_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrisServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iris.pb.Iris/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrisServer).GetValue(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iris_RemoveValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrisServer).RemoveValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iris.pb.Iris/RemoveValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrisServer).RemoveValue(ctx, req.(*RemoveValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iris_RemoveSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrisServer).RemoveSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iris.pb.Iris/RemoveSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrisServer).RemoveSource(ctx, req.(*RemoveSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iris_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrisServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iris.pb.Iris/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrisServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iris_SubscribeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrisServer).SubscribeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iris.pb.Iris/SubscribeKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrisServer).SubscribeKey(ctx, req.(*SubscribeKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iris_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrisServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iris.pb.Iris/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrisServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iris_UnsubscribeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrisServer).UnsubscribeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iris.pb.Iris/UnsubscribeKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrisServer).UnsubscribeKey(ctx, req.(*UnsubscribeKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Iris_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iris.pb.Iris",
	HandlerType: (*IrisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Iris_Connect_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _Iris_SetValue_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _Iris_GetValue_Handler,
		},
		{
			MethodName: "RemoveValue",
			Handler:    _Iris_RemoveValue_Handler,
		},
		{
			MethodName: "RemoveSource",
			Handler:    _Iris_RemoveSource_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Iris_Subscribe_Handler,
		},
		{
			MethodName: "SubscribeKey",
			Handler:    _Iris_SubscribeKey_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Iris_Unsubscribe_Handler,
		},
		{
			MethodName: "UnsubscribeKey",
			Handler:    _Iris_UnsubscribeKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Iris_Listen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSources",
			Handler:       _Iris_GetSources_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetKeys",
			Handler:       _Iris_GetKeys_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "iris.proto",
}

func init() { proto.RegisterFile("iris.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0x5d, 0x73, 0xd2, 0x40,
	0x14, 0x6d, 0x00, 0xa1, 0x3d, 0x56, 0xa0, 0x17, 0x44, 0x8c, 0x5f, 0x9d, 0xf5, 0x05, 0xa7, 0x96,
	0xe9, 0xe8, 0xf8, 0xea, 0xb4, 0xd8, 0x31, 0xad, 0xd5, 0x17, 0x18, 0x1c, 0xab, 0x4f, 0x05, 0xf7,
	0x21, 0x53, 0x4d, 0x30, 0x1b, 0x3a, 0xc3, 0xcf, 0xf5, 0x9f, 0x38, 0x4d, 0x36, 0x9b, 0xcd, 0x07,
	0x8d, 0xa5, 0xbc, 0x65, 0xf7, 0xde, 0x3d, 0xf7, 0xdc, 0xcb, 0x9e, 0xb3, 0x00, 0xb6, 0x67, 0x8b,
	0xfe, 0xcc, 0x73, 0x7d, 0x97, 0x6a, 0xe1, 0xf7, 0x84, 0x35, 0x51, 0xff, 0xe0, 0x3a, 0x0e, 0x9f,
	0xfa, 0x43, 0xfe, 0x67, 0xce, 0x85, 0xcf, 0xf6, 0xd0, 0x50, 0x3b, 0x62, 0xe6, 0x3a, 0x82, 0x53,
	0x17, 0x35, 0xc1, 0x85, 0xb0, 0x5d, 0xa7, 0x6b, 0xec, 0x1a, 0xbd, 0xad, 0x61, 0xb4, 0x64, 0xaf,
	0xf0, 0xe0, 0xb3, 0x2d, 0x7c, 0xee, 0xc8, 0xd3, 0x37, 0xa4, 0x9e, 0xa0, 0x3a, 0x9e, 0xfd, 0xbc,
	0xf0, 0x39, 0x75, 0x50, 0x15, 0xee, 0xdc, 0x9b, 0x72, 0x99, 0x22, 0x57, 0xd4, 0x44, 0xf9, 0x92,
	0x2f, 0xba, 0xa5, 0x60, 0xf3, 0xfa, 0x93, 0xda, 0xb8, 0x77, 0x75, 0xf1, 0x6b, 0xce, 0xbb, 0xe5,
	0x5d, 0xa3, 0xb7, 0x3d, 0x0c, 0x17, 0x6c, 0x1f, 0x3b, 0x16, 0xf7, 0x47, 0xc1, 0x21, 0x51, 0x5c,
	0xf8, 0x35, 0x48, 0x4f, 0x97, 0x3d, 0x2d, 0x21, 0xc1, 0xc6, 0x68, 0x58, 0xdc, 0xff, 0x7a, 0x5d,
	0xa8, 0x10, 0x5a, 0x03, 0x29, 0xe5, 0x75, 0x52, 0x56, 0x9d, 0xb0, 0x1e, 0x9a, 0x31, 0xac, 0xa4,
	0xa0, 0xba, 0x33, 0xf4, 0xee, 0x2e, 0xd1, 0x18, 0xad, 0x9f, 0x40, 0x5c, 0xac, 0xa2, 0x17, 0xeb,
	0xa1, 0x39, 0xfa, 0x3f, 0x5a, 0xdf, 0x40, 0x43, 0xfe, 0xdb, 0xbd, 0xe2, 0x6b, 0x1f, 0xcd, 0x39,
	0x5a, 0x09, 0xe4, 0xa2, 0x4b, 0x77, 0x0b, 0x68, 0x2b, 0x82, 0x0e, 0x7f, 0xfd, 0x95, 0x59, 0xb3,
	0x13, 0xb4, 0x93, 0x40, 0xab, 0x92, 0x64, 0x03, 0xd4, 0x2d, 0xee, 0x9f, 0xf1, 0x85, 0x58, 0x9d,
	0xcd, 0xcb, 0xe0, 0x8e, 0x86, 0x18, 0x92, 0x88, 0xec, 0xdd, 0x88, 0x7b, 0x3f, 0x46, 0x73, 0x34,
	0x9f, 0x88, 0xa9, 0x67, 0x4f, 0xee, 0xd0, 0xf8, 0x1e, 0x76, 0x34, 0x94, 0x02, 0xed, 0x9c, 0xa3,
	0xa5, 0x92, 0xcf, 0xf8, 0x62, 0x9d, 0x97, 0xe4, 0x10, 0xed, 0x24, 0xf4, 0xcd, 0x54, 0xb2, 0x5e,
	0xc2, 0x3e, 0x82, 0xc6, 0x8e, 0xb8, 0xfb, 0x44, 0xf6, 0xd1, 0x4a, 0xe0, 0x14, 0xcc, 0xe4, 0x07,
	0x1e, 0x6a, 0xe9, 0x6b, 0x9e, 0xca, 0x00, 0x9d, 0x34, 0xf8, 0x6d, 0xe7, 0xf2, 0xe6, 0x6f, 0x15,
	0x95, 0x53, 0xcf, 0x16, 0xf4, 0x1e, 0x35, 0x69, 0xfc, 0xf4, 0xa8, 0x2f, 0xdf, 0x87, 0x7e, 0xf2,
	0x71, 0x30, 0xbb, 0xd9, 0x40, 0x58, 0x90, 0x6d, 0xd0, 0x3b, 0x54, 0xc3, 0xb7, 0x80, 0x3a, 0x2a,
	0x2b, 0xf1, 0x38, 0x98, 0x0d, 0xb5, 0x1f, 0xbe, 0x04, 0x6c, 0xe3, 0xc0, 0xa0, 0x53, 0x20, 0xb6,
	0x67, 0x32, 0x55, 0x4a, 0xc6, 0xe2, 0xcd, 0x27, 0xb9, 0xb1, 0xa8, 0xfe, 0x81, 0x41, 0x87, 0xa8,
	0x49, 0x5d, 0x68, 0x1d, 0x24, 0xd5, 0xa6, 0x75, 0x90, 0x92, 0x50, 0x80, 0x70, 0x84, 0xcd, 0xc8,
	0x0f, 0x29, 0xce, 0x4c, 0xf9, 0xb1, 0xf9, 0x38, 0x27, 0xa2, 0xc6, 0x70, 0x84, 0x4d, 0x2b, 0x0b,
	0x61, 0x2d, 0x85, 0xb0, 0xb2, 0x10, 0x9f, 0x70, 0x5f, 0x73, 0x44, 0x8a, 0xfb, 0xce, 0x3a, 0xb0,
	0xf9, 0x34, 0x3f, 0xa8, 0xb0, 0xbe, 0x60, 0x5b, 0x77, 0x2e, 0x4a, 0xe7, 0x27, 0x9c, 0xd1, 0x7c,
	0xb6, 0x24, 0xaa, 0xe0, 0x8e, 0xb1, 0xa5, 0x74, 0x48, 0xda, 0x1c, 0x52, 0xba, 0x32, 0xcd, 0xbc,
	0x90, 0x4e, 0x4a, 0x57, 0xb3, 0x46, 0x2a, 0xc7, 0x3f, 0x34, 0x52, 0x79, 0x16, 0x10, 0xce, 0x4b,
	0x93, 0x81, 0x36, 0xaf, 0xac, 0xe0, 0xb5, 0x79, 0xe5, 0xa8, 0x98, 0x6d, 0xd0, 0x08, 0xf5, 0xa4,
	0xa4, 0xe8, 0x79, 0xde, 0x09, 0x8d, 0xde, 0x8b, 0xa5, 0xf1, 0x08, 0x74, 0x50, 0xf9, 0x5e, 0x9a,
	0x4d, 0x26, 0xd5, 0xe0, 0xbf, 0xd7, 0xdb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x73, 0x01, 0xa5,
	0x6e, 0x89, 0x09, 0x00, 0x00,
}
